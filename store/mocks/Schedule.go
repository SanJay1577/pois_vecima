// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	models "pois/models"

	mock "github.com/stretchr/testify/mock"
)

// Schedule is an autogenerated mock type for the Schedule type
type Schedule struct {
	mock.Mock
}

// CreateSchedule provides a mock function with given fields: _a0
func (_m *Schedule) CreateSchedule(_a0 models.Schedule) (models.Schedule, error) {
	ret := _m.Called(_a0)

	var r0 models.Schedule
	if rf, ok := ret.Get(0).(func(models.Schedule) models.Schedule); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Schedule)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Schedule) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSchedule provides a mock function with given fields: _a0, _a1
func (_m *Schedule) DeleteSchedule(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindSchedule provides a mock function with given fields: _a0, _a1
func (_m *Schedule) FindSchedule(_a0 string, _a1 string) ([]models.Schedule, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []models.Schedule
	if rf, ok := ret.Get(0).(func(string, string) []models.Schedule); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Schedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSchedule interface {
	mock.TestingT
	Cleanup(func())
}

// NewSchedule creates a new instance of Schedule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSchedule(t mockConstructorTestingTNewSchedule) *Schedule {
	mock := &Schedule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
